(function(){const util={each:function(obj,fn){let continues;for(let i in obj){if(typeof obj!=='object'||obj.hasOwnProperty(i)){continues=fn(i,obj[i]);if(continues===!1){break}}}},isFunction:function(obj){return typeof obj==='function'||!1},extend:function(obj,source){for(let property in source){obj[property]=source[property]}
return obj},};const MediaBuilder={min:function(min,unit='px'){return `(min-width: ${min}${unit})`},max:function(max,unit='px'){return `(max-width: ${max}${unit})`},between:function(min,max,unit='px'){return `(min-width: ${min}${unit}) and (max-width: ${max}${unit})`},get:function(min,max,unit='px'){if(min===0){return this.max(max,unit)}
if(max===Infinity){return this.min(min,unit)}
return this.between(min,max,unit)},};class Callbacks{constructor(){this.length=0;this.list=[]}
add(fn,data,one=!1){this.list.push({fn,data:data,one:one,});this.length++}
remove(fn){for(let i=0;i<this.list.length;i++){if(this.list[i].fn===fn){this.list.splice(i,1);this.length--;i--}}}
empty(){this.list=[];this.length=0}
call(caller,i,fn=null){if(typeof i==='undefined'){i=this.length-1}
let callback=this.list[i];if(util.isFunction(fn)){fn.call(this,caller,callback,i)}else if(util.isFunction(callback.fn)){callback.fn.call(caller||window,callback.data)}
if(callback.one){this.list.splice(i,1);this.length--;return!0}
return!1}
fire(caller,fn=null){let listLength=this.list.length;for(let i=0;i<listLength;i++){const removed=this.call(caller,i,fn);if(removed){listLength--;i--}}}}
const ChangeEvent={current:null,callbacks:new Callbacks(),trigger(size){let previous=this.current;if(!(size.name.endsWith('__max')||size.name.endsWith('__min'))&&size.useForCurrent){this.current=size}
this.callbacks.fire(size,(caller,callback)=>{if(util.isFunction(callback.fn)){callback.fn.call({current:this.current,previous,},callback.data)}})},one(data,fn){return this.on(data,fn,!0)},on(data,fn,one=!1){if(typeof fn==='undefined'&&util.isFunction(data)){fn=data;data=undefined}
if(util.isFunction(fn)){this.callbacks.add(fn,data,one)}},off(fn){if(typeof fn==='undefined'){this.callbacks.empty()}},};class MediaQuery{constructor(name,media){this.name=name;this.media=media;this.initialize()}
initialize(){this.callbacks={enter:new Callbacks(),leave:new Callbacks(),};this.mql=(window.matchMedia&&window.matchMedia(this.media))||{matches:!1,media:this.media,addEventListener:function(){},removeEventListener:function(){},};const that=this;this.mqlListener=(mql)=>{const type=(mql.matches&&'enter')||'leave';that.callbacks[type].fire(that)};if(typeof this.mql.addEventListener!=='undefined'){this.mql.addEventListener('change',this.mqlListener)}else{this.mql.addListener?.(this.mqlListener)}}
on(types,data,fn,one=!1){if(typeof types==='object'){for(let type in types){if(types.hasOwnProperty(type)){this.on(type,data,types[type],one)}}
return this}
if(typeof fn==='undefined'&&util.isFunction(data)){fn=data;data=undefined}
if(!util.isFunction(fn)){return this}
if(typeof this.callbacks[types]!=='undefined'){this.callbacks[types].add(fn,data,one);if(types==='enter'&&this.isMatched()){this.callbacks[types].call(this)}}
return this}
one(types,data,fn){return this.on(types,data,fn,!0)}
off(types,fn){let type;if(typeof types==='object'){for(type in types){if(types.hasOwnProperty(type)){this.off(type,types[type])}}
return this}
if(typeof types==='undefined'){this.callbacks.enter.empty();this.callbacks.leave.empty()}else if(types in this.callbacks){if(fn){this.callbacks[types].remove(fn)}else{this.callbacks[types].empty()}}
return this}
isMatched(){return this.mql.matches}
destroy(){this.off()}}
class Size extends MediaQuery{constructor(name,min=0,max=Infinity,unit='px',useForCurrent=!0){let media=MediaBuilder.get(min,max,unit);super(name,media);this.min=min;this.max=max;this.unit=unit;this.useForCurrent=useForCurrent;const that=this;this.changeListener=()=>{if(that.isMatched()){ChangeEvent.trigger(that)}};if(this.isMatched()&&!(name.endsWith('__max')||name.endsWith('__min'))&&this.useForCurrent){ChangeEvent.current=this}
if(typeof this.mql.addEventListener!=='undefined'){this.mql.addEventListener('change',this.changeListener)}else{this.mql.addListener?.(this.changeListener)}}
destroy(){this.off();if(typeof this.mql.removeEventListener!=='undefined'){this.mql.removeEventListener('change',this.changeListener)}else{this.mql.removeListener?.(this.changeListener)}}}
class UnionSize extends MediaQuery{constructor(names,breakpoint){let sizes=[];let media=[];util.each(names.split(' '),(i,name)=>{let size=breakpoint.get(name);if(size){sizes.push(size);media.push(size.media)}});super(names,media.join(','))}}
window.DtBreakpoints=class Breakpoints{constructor(values,options={}){if(!values){throw new Error('Please supply breakpoints values')}
this.options=util.extend(options,{unit:'px',});this.sizes=[];this.unionSizes=[];for(let size in values){if(values.hasOwnProperty(size)){this.set(size,values[size].min,values[size].max,this.options.unit,values[size].useForCurrent)}}}
destroy(){util.each(sizes,(name,size)=>{size.destroy()});this.sizes={};ChangeEvent.current=null}
is(size){const breakpoint=this.get(size);if(!breakpoint){return!1}
return breakpoint.isMatched()}
all(){let names=[];util.each(this.sizes,(name)=>{names.push(name)});return names}
toMaxName(name){return `${name}__max`}
toMinName(name){return `${name}__min`}
set(name,min=0,max=Infinity,unit='px',useForCurrent=!0){name=name.toLowerCase();let size=this.get(name);if(size){size.destroy()}
const maxName=this.toMaxName(name);const minName=this.toMinName(name);this.sizes[name]=new Size(name,min,max,unit,useForCurrent);if(max!==Infinity){this.sizes[maxName]=new Size(maxName,0,max,unit,!1)}
if(min!==0){this.sizes[minName]=new Size(minName,min,Infinity,unit,!1)}
return this.sizes[name]}
get(size){size=size.toLowerCase();if(this.sizes.hasOwnProperty(size)){return this.sizes[size]}
return null}
getUnion(sizes){if(this.unionSizes.hasOwnProperty(sizes)){return this.unionSizes[sizes]}
this.unionSizes[sizes]=new UnionSize(sizes,this);return this.unionSizes[sizes]}
getMin(size){const obj=this.get(size);if(obj){return obj.min}
return null}
getMax(size){const obj=this.get(size);if(obj){return obj.max}
return null}
current(){return ChangeEvent.current}
getMedia(size){const obj=this.get(size);if(obj){return obj.media}
return null}
isMin(size){return this.current().min>=this.get(size).min}
isMax(size){return this.current().max<=this.get(size).max}
on(sizes,types,data,fn,one=!1){sizes=sizes.trim();if(sizes==='change'){fn=data;data=types;return ChangeEvent.on(data,fn,one)}
if(sizes.includes(' ')){let union=this.getUnion(sizes);if(union){union.on(types,data,fn,one)}}else{let size=this.get(sizes);if(size){size.on(types,data,fn,one)}}
return this}
onMax(size,types,fn,one,data){const maxSize=this.get(this.toMaxName(size));if(maxSize){maxSize.on(types,data,fn,one)}
return this}
onMin(size,types,fn,one,data){const minSize=this.get(this.toMinName(size));if(minSize){minSize.on(types,data,fn,one)}
return this}
onMedia(min,max,types,fn,one,unit='px',data){const name=`${min}_${max}__custom`;const size=new Size(name,min,max,unit,!1);size.on(types,data,fn,one);return size}
one(sizes,types,data,fn){return this.on(sizes,types,data,fn,!0)}
off(sizes,types,fn){sizes=sizes.trim();if(sizes==='change'){return ChangeEvent.off(types)}
if(sizes.includes(' ')){let union=this.getUnion(sizes);if(union){union.off(types,fn)}}else{let size=this.get(sizes);if(size){size.off(types,fn)}}
return this}}})();DT.breakpoints=new DtBreakpoints({xs:{min:0,max:575.50},sm:{min:576,max:767.50},md:{min:768,max:991.50,},lg:{min:992,max:1199.50},xl:{min:1200,max:1399.50},xxl:{min:1400,max:2047.50},'2k':{min:2048,max:4095.50},'4k':{min:4096,max:8191.50},'8k':{min:8192,max:Infinity},headerLoginVisible:{min:1550,max:Infinity,useForCurrent:!1,},headerNotificationsVisible:{min:1290,max:Infinity,useForCurrent:!1,},headerStatsMobile:{min:0,max:1289.50,useForCurrent:!1,},headerStatsDesktop:{min:1290,max:Infinity,useForCurrent:!1,},})